function shallowCopy(a){return Array.isArray(a)?a.concat():a&&"object"==typeof a?assign(new a.constructor,a):a}function invariantArrayCase(a,r,e){invariant(Array.isArray(a),"update(): expected target of %s to be an array; got %s.",e,a);var t=r[e];invariant(Array.isArray(t),"update(): expected spec of %s to be an array; got %s. Did you forget to wrap your parameter in an array?",e,t)}function update(a,r){if(invariant("object"==typeof r,"update(): You provided a key path to update() that did not contain one of %s. Did you forget to include {%s: ...}?",ALL_COMMANDS_LIST.join(", "),COMMAND_SET),r.hasOwnProperty(COMMAND_SET))return invariant(1===Object.keys(r).length,"Cannot have more than one key in an object with %s",COMMAND_SET),r[COMMAND_SET];var e=shallowCopy(a);if(r.hasOwnProperty(COMMAND_MERGE)){var t=r[COMMAND_MERGE];invariant(t&&"object"==typeof t,"update(): %s expects a spec of type 'object'; got %s",COMMAND_MERGE,t),invariant(e&&"object"==typeof e,"update(): %s expects a target of type 'object'; got %s",COMMAND_MERGE,e),assign(e,r[COMMAND_MERGE])}r.hasOwnProperty(COMMAND_PUSH)&&(invariantArrayCase(a,r,COMMAND_PUSH),r[COMMAND_PUSH].forEach(function(a){e.push(a)})),r.hasOwnProperty(COMMAND_UNSHIFT)&&(invariantArrayCase(a,r,COMMAND_UNSHIFT),r[COMMAND_UNSHIFT].forEach(function(a){e.unshift(a)})),r.hasOwnProperty(COMMAND_SPLICE)&&(invariant(Array.isArray(a),"Expected %s target to be an array; got %s",COMMAND_SPLICE,a),invariant(Array.isArray(r[COMMAND_SPLICE]),"update(): expected spec of %s to be an array of arrays; got %s. Did you forget to wrap your parameters in an array?",COMMAND_SPLICE,r[COMMAND_SPLICE]),r[COMMAND_SPLICE].forEach(function(a){invariant(Array.isArray(a),"update(): expected spec of %s to be an array of arrays; got %s. Did you forget to wrap your parameters in an array?",COMMAND_SPLICE,r[COMMAND_SPLICE]),e.splice.apply(e,a)})),r.hasOwnProperty(COMMAND_APPLY)&&(invariant("function"==typeof r[COMMAND_APPLY],"update(): expected spec of %s to be a function; got %s.",COMMAND_APPLY,r[COMMAND_APPLY]),e=r[COMMAND_APPLY](e));for(var M in r)ALL_COMMANDS_SET.hasOwnProperty(M)&&ALL_COMMANDS_SET[M]||(e[M]=update(a[M],r[M]));return e}var assign=require("Object.assign"),keyOf=require("keyOf"),invariant=require("invariant"),COMMAND_PUSH=keyOf({$push:null}),COMMAND_UNSHIFT=keyOf({$unshift:null}),COMMAND_SPLICE=keyOf({$splice:null}),COMMAND_SET=keyOf({$set:null}),COMMAND_MERGE=keyOf({$merge:null}),COMMAND_APPLY=keyOf({$apply:null}),ALL_COMMANDS_LIST=[COMMAND_PUSH,COMMAND_UNSHIFT,COMMAND_SPLICE,COMMAND_SET,COMMAND_MERGE,COMMAND_APPLY],ALL_COMMANDS_SET={};ALL_COMMANDS_LIST.forEach(function(a){ALL_COMMANDS_SET[a]=!0}),module.exports=update;
//# sourceMappingURL=update.js.map