function checkMask(e,t){return(e&t)===t}var invariant=require("invariant"),DOMPropertyInjection={MUST_USE_ATTRIBUTE:1,MUST_USE_PROPERTY:2,HAS_SIDE_EFFECTS:4,HAS_BOOLEAN_VALUE:8,HAS_NUMERIC_VALUE:16,HAS_POSITIVE_NUMERIC_VALUE:48,HAS_OVERLOADED_BOOLEAN_VALUE:64,injectDOMPropertyConfig:function(e){var t=e.Properties||{},r=e.DOMAttributeNames||{},o=e.DOMPropertyNames||{},a=e.DOMMutationMethods||{};e.isCustomAttribute&&DOMProperty._isCustomAttributeFunctions.push(e.isCustomAttribute);for(var n in t){invariant(!DOMProperty.isStandardName.hasOwnProperty(n),"injectDOMPropertyConfig(...): You're trying to inject DOM property '%s' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.",n),DOMProperty.isStandardName[n]=!0;var i=n.toLowerCase();if(DOMProperty.getPossibleStandardName[i]=n,r.hasOwnProperty(n)){var s=r[n];DOMProperty.getPossibleStandardName[s]=n,DOMProperty.getAttributeName[n]=s}else DOMProperty.getAttributeName[n]=i;DOMProperty.getPropertyName[n]=o.hasOwnProperty(n)?o[n]:n,DOMProperty.getMutationMethod[n]=a.hasOwnProperty(n)?a[n]:null;var u=t[n];DOMProperty.mustUseAttribute[n]=checkMask(u,DOMPropertyInjection.MUST_USE_ATTRIBUTE),DOMProperty.mustUseProperty[n]=checkMask(u,DOMPropertyInjection.MUST_USE_PROPERTY),DOMProperty.hasSideEffects[n]=checkMask(u,DOMPropertyInjection.HAS_SIDE_EFFECTS),DOMProperty.hasBooleanValue[n]=checkMask(u,DOMPropertyInjection.HAS_BOOLEAN_VALUE),DOMProperty.hasNumericValue[n]=checkMask(u,DOMPropertyInjection.HAS_NUMERIC_VALUE),DOMProperty.hasPositiveNumericValue[n]=checkMask(u,DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE),DOMProperty.hasOverloadedBooleanValue[n]=checkMask(u,DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE),invariant(!DOMProperty.mustUseAttribute[n]||!DOMProperty.mustUseProperty[n],"DOMProperty: Cannot require using both attribute and property: %s",n),invariant(DOMProperty.mustUseProperty[n]||!DOMProperty.hasSideEffects[n],"DOMProperty: Properties that have side effects must use property: %s",n),invariant(!!DOMProperty.hasBooleanValue[n]+!!DOMProperty.hasNumericValue[n]+!!DOMProperty.hasOverloadedBooleanValue[n]<=1,"DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s",n)}}},defaultValueCache={},DOMProperty={ID_ATTRIBUTE_NAME:"data-reactid",isStandardName:{},getPossibleStandardName:{},getAttributeName:{},getPropertyName:{},getMutationMethod:{},mustUseAttribute:{},mustUseProperty:{},hasSideEffects:{},hasBooleanValue:{},hasNumericValue:{},hasPositiveNumericValue:{},hasOverloadedBooleanValue:{},_isCustomAttributeFunctions:[],isCustomAttribute:function(e){for(var t=0;t<DOMProperty._isCustomAttributeFunctions.length;t++){var r=DOMProperty._isCustomAttributeFunctions[t];if(r(e))return!0}return!1},getDefaultValueForProperty:function(e,t){var r,o=defaultValueCache[e];return o||(defaultValueCache[e]=o={}),t in o||(r=document.createElement(e),o[t]=r[t]),o[t]},injection:DOMPropertyInjection};module.exports=DOMProperty;
//# sourceMappingURL=DOMProperty.js.map