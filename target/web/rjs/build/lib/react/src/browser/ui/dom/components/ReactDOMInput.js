function forceUpdateIfMounted(){this.isMounted()&&this.forceUpdate()}var AutoFocusMixin=require("AutoFocusMixin"),DOMPropertyOperations=require("DOMPropertyOperations"),LinkedValueUtils=require("LinkedValueUtils"),ReactBrowserComponentMixin=require("ReactBrowserComponentMixin"),ReactCompositeComponent=require("ReactCompositeComponent"),ReactElement=require("ReactElement"),ReactDOM=require("ReactDOM"),ReactMount=require("ReactMount"),ReactUpdates=require("ReactUpdates"),assign=require("Object.assign"),invariant=require("invariant"),input=ReactElement.createFactory(ReactDOM.input.type),instancesByReactID={},ReactDOMInput=ReactCompositeComponent.createClass({displayName:"ReactDOMInput",mixins:[AutoFocusMixin,LinkedValueUtils.Mixin,ReactBrowserComponentMixin],getInitialState:function(){var e=this.props.defaultValue;return{initialChecked:this.props.defaultChecked||!1,initialValue:null!=e?e:null}},render:function(){var e=assign({},this.props);e.defaultChecked=null,e.defaultValue=null;var t=LinkedValueUtils.getValue(this);e.value=null!=t?t:this.state.initialValue;var n=LinkedValueUtils.getChecked(this);return e.checked=null!=n?n:this.state.initialChecked,e.onChange=this._handleChange,input(e,this.props.children)},componentDidMount:function(){var e=ReactMount.getID(this.getDOMNode());instancesByReactID[e]=this},componentWillUnmount:function(){var e=this.getDOMNode(),t=ReactMount.getID(e);delete instancesByReactID[t]},componentDidUpdate:function(){var e=this.getDOMNode();null!=this.props.checked&&DOMPropertyOperations.setValueForProperty(e,"checked",this.props.checked||!1);var t=LinkedValueUtils.getValue(this);null!=t&&DOMPropertyOperations.setValueForProperty(e,"value",""+t)},_handleChange:function(e){var t,n=LinkedValueUtils.getOnChange(this);n&&(t=n.call(this,e)),ReactUpdates.asap(forceUpdateIfMounted,this);var a=this.props.name;if("radio"===this.props.type&&null!=a){for(var i=this.getDOMNode(),r=i;r.parentNode;)r=r.parentNode;for(var o=r.querySelectorAll("input[name="+JSON.stringify(""+a)+'][type="radio"]'),s=0,u=o.length;u>s;s++){var c=o[s];if(c!==i&&c.form===i.form){var l=ReactMount.getID(c);invariant(l,"ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");var p=instancesByReactID[l];invariant(p,"ReactDOMInput: Unknown radio button ID %s.",l),ReactUpdates.asap(forceUpdateIfMounted,p)}}}return t}});module.exports=ReactDOMInput;
//# sourceMappingURL=ReactDOMInput.js.map