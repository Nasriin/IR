function getReactRootID(e){var t=getReactRootElementInContainer(e);return t&&ReactMount.getID(t)}function getID(e){var t=internalGetID(e);if(t)if(nodeCache.hasOwnProperty(t)){var n=nodeCache[t];n!==e&&(invariant(!isValid(n,t),"ReactMount: Two valid but unequal nodes with the same `%s`: %s",ATTR_NAME,t),nodeCache[t]=e)}else nodeCache[t]=e;return t}function internalGetID(e){return e&&e.getAttribute&&e.getAttribute(ATTR_NAME)||""}function setID(e,t){var n=internalGetID(e);n!==t&&delete nodeCache[n],e.setAttribute(ATTR_NAME,t),nodeCache[t]=e}function getNode(e){return nodeCache.hasOwnProperty(e)&&isValid(nodeCache[e],e)||(nodeCache[e]=ReactMount.findReactNodeByID(e)),nodeCache[e]}function isValid(e,t){if(e){invariant(internalGetID(e)===t,"ReactMount: Unexpected modification of `%s`",ATTR_NAME);var n=ReactMount.findReactContainerForID(t);if(n&&containsNode(n,e))return!0}return!1}function purgeID(e){delete nodeCache[e]}function findDeepestCachedAncestorImpl(e){var t=nodeCache[e];return t&&isValid(t,e)?void(deepestNodeSoFar=t):!1}function findDeepestCachedAncestor(e){deepestNodeSoFar=null,ReactInstanceHandles.traverseAncestors(e,findDeepestCachedAncestorImpl);var t=deepestNodeSoFar;return deepestNodeSoFar=null,t}var DOMProperty=require("DOMProperty"),ReactBrowserEventEmitter=require("ReactBrowserEventEmitter"),ReactCurrentOwner=require("ReactCurrentOwner"),ReactElement=require("ReactElement"),ReactLegacyElement=require("ReactLegacyElement"),ReactInstanceHandles=require("ReactInstanceHandles"),ReactPerf=require("ReactPerf"),containsNode=require("containsNode"),deprecated=require("deprecated"),getReactRootElementInContainer=require("getReactRootElementInContainer"),instantiateReactComponent=require("instantiateReactComponent"),invariant=require("invariant"),shouldUpdateReactComponent=require("shouldUpdateReactComponent"),warning=require("warning"),createElement=ReactLegacyElement.wrapCreateElement(ReactElement.createElement),SEPARATOR=ReactInstanceHandles.SEPARATOR,ATTR_NAME=DOMProperty.ID_ATTRIBUTE_NAME,nodeCache={},ELEMENT_NODE_TYPE=1,DOC_NODE_TYPE=9,instancesByReactRootID={},containersByReactRootID={};if(__DEV__)var rootElementsByReactRootID={};var findComponentRootReusableArray=[],deepestNodeSoFar=null,ReactMount={_instancesByReactRootID:instancesByReactRootID,scrollMonitor:function(e,t){t()},_updateRootComponent:function(e,t,n,o){var r=t.props;return ReactMount.scrollMonitor(n,function(){e.replaceProps(r,o)}),__DEV__&&(rootElementsByReactRootID[getReactRootID(n)]=getReactRootElementInContainer(n)),e},_registerComponent:function(e,t){invariant(t&&(t.nodeType===ELEMENT_NODE_TYPE||t.nodeType===DOC_NODE_TYPE),"_registerComponent(...): Target container is not a DOM element."),ReactBrowserEventEmitter.ensureScrollValueMonitoring();var n=ReactMount.registerContainer(t);return instancesByReactRootID[n]=e,n},_renderNewRootComponent:ReactPerf.measure("ReactMount","_renderNewRootComponent",function(e,t,n){warning(null==ReactCurrentOwner.current,"_renderNewRootComponent(): Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.");var o=instantiateReactComponent(e,null),r=ReactMount._registerComponent(o,t);return o.mountComponentIntoNode(r,t,n),__DEV__&&(rootElementsByReactRootID[r]=getReactRootElementInContainer(t)),o}),render:function(e,t,n){invariant(ReactElement.isValidElement(e),"renderComponent(): Invalid component element.%s","string"==typeof e?" Instead of passing an element string, make sure to instantiate it by passing it to React.createElement.":ReactLegacyElement.isValidFactory(e)?" Instead of passing a component class, make sure to instantiate it by passing it to React.createElement.":"undefined"!=typeof e.props?" This may be caused by unintentionally loading two independent copies of React.":"");var o=instancesByReactRootID[getReactRootID(t)];if(o){var r=o._currentElement;if(shouldUpdateReactComponent(r,e))return ReactMount._updateRootComponent(o,e,t,n);ReactMount.unmountComponentAtNode(t)}var a=getReactRootElementInContainer(t),i=a&&ReactMount.isRenderedByReact(a),c=i&&!o,s=ReactMount._renderNewRootComponent(e,t,c);return n&&n.call(s),s},constructAndRenderComponent:function(e,t,n){var o=createElement(e,t);return ReactMount.render(o,n)},constructAndRenderComponentByID:function(e,t,n){var o=document.getElementById(n);return invariant(o,'Tried to get element with id of "%s" but it is not present on the page.',n),ReactMount.constructAndRenderComponent(e,t,o)},registerContainer:function(e){var t=getReactRootID(e);return t&&(t=ReactInstanceHandles.getReactRootIDFromNodeID(t)),t||(t=ReactInstanceHandles.createReactRootID()),containersByReactRootID[t]=e,t},unmountComponentAtNode:function(e){warning(null==ReactCurrentOwner.current,"unmountComponentAtNode(): Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.");var t=getReactRootID(e),n=instancesByReactRootID[t];return n?(ReactMount.unmountComponentFromNode(n,e),delete instancesByReactRootID[t],delete containersByReactRootID[t],__DEV__&&delete rootElementsByReactRootID[t],!0):!1},unmountComponentFromNode:function(e,t){for(e.unmountComponent(),t.nodeType===DOC_NODE_TYPE&&(t=t.documentElement);t.lastChild;)t.removeChild(t.lastChild)},findReactContainerForID:function(e){var t=ReactInstanceHandles.getReactRootIDFromNodeID(e),n=containersByReactRootID[t];if(__DEV__){var o=rootElementsByReactRootID[t];if(o&&o.parentNode!==n){invariant(internalGetID(o)===t,"ReactMount: Root element ID differed from reactRootID.");var r=n.firstChild;r&&t===internalGetID(r)?rootElementsByReactRootID[t]=r:console.warn("ReactMount: Root element has been removed from its original container. New container:",o.parentNode)}}return n},findReactNodeByID:function(e){var t=ReactMount.findReactContainerForID(e);return ReactMount.findComponentRoot(t,e)},isRenderedByReact:function(e){if(1!==e.nodeType)return!1;var t=ReactMount.getID(e);return t?t.charAt(0)===SEPARATOR:!1},getFirstReactDOM:function(e){for(var t=e;t&&t.parentNode!==t;){if(ReactMount.isRenderedByReact(t))return t;t=t.parentNode}return null},findComponentRoot:function(e,t){var n=findComponentRootReusableArray,o=0,r=findDeepestCachedAncestor(t)||e;for(n[0]=r.firstChild,n.length=1;o<n.length;){for(var a,i=n[o++];i;){var c=ReactMount.getID(i);c?t===c?a=i:ReactInstanceHandles.isAncestorIDOf(c,t)&&(n.length=o=0,n.push(i.firstChild)):n.push(i.firstChild),i=i.nextSibling}if(a)return n.length=0,a}n.length=0,invariant(!1,"findComponentRoot(..., %s): Unable to find element. This probably means the DOM was unexpectedly mutated (e.g., by the browser), usually due to forgetting a <tbody> when using tables, nesting tags like <form>, <p>, or <a>, or using non-SVG elements in an <svg> parent. Try inspecting the child nodes of the element with React ID `%s`.",t,ReactMount.getID(e))},getReactRootID:getReactRootID,getID:getID,setID:setID,getNode:getNode,purgeID:purgeID};ReactMount.renderComponent=deprecated("ReactMount","renderComponent","render",this,ReactMount.render),module.exports=ReactMount;
//# sourceMappingURL=ReactMount.js.map