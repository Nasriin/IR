var ReactElement=require("ReactElement"),ReactOwner=require("ReactOwner"),ReactUpdates=require("ReactUpdates"),assign=require("Object.assign"),invariant=require("invariant"),keyMirror=require("keyMirror"),ComponentLifeCycle=keyMirror({MOUNTED:null,UNMOUNTED:null}),injected=!1,unmountIDFromEnvironment=null,mountImageIntoNode=null,ReactComponent={injection:{injectEnvironment:function(e){invariant(!injected,"ReactComponent: injectEnvironment() can only be called once."),mountImageIntoNode=e.mountImageIntoNode,unmountIDFromEnvironment=e.unmountIDFromEnvironment,ReactComponent.BackendIDOperations=e.BackendIDOperations,injected=!0}},LifeCycle:ComponentLifeCycle,BackendIDOperations:null,Mixin:{isMounted:function(){return this._lifeCycleState===ComponentLifeCycle.MOUNTED},setProps:function(e,n){var t=this._pendingElement||this._currentElement;this.replaceProps(assign({},t.props,e),n)},replaceProps:function(e,n){invariant(this.isMounted(),"replaceProps(...): Can only update a mounted component."),invariant(0===this._mountDepth,"replaceProps(...): You called `setProps` or `replaceProps` on a component with a parent. This is an anti-pattern since props will get reactively updated when rendered. Instead, change the owner's `render` method to pass the correct value as props to the component where it is created."),this._pendingElement=ReactElement.cloneAndReplaceProps(this._pendingElement||this._currentElement,e),ReactUpdates.enqueueUpdate(this,n)},_setPropsInternal:function(e,n){var t=this._pendingElement||this._currentElement;this._pendingElement=ReactElement.cloneAndReplaceProps(t,assign({},t.props,e)),ReactUpdates.enqueueUpdate(this,n)},construct:function(e){this.props=e.props,this._owner=e._owner,this._lifeCycleState=ComponentLifeCycle.UNMOUNTED,this._pendingCallbacks=null,this._currentElement=e,this._pendingElement=null},mountComponent:function(e,n,t){invariant(!this.isMounted(),"mountComponent(%s, ...): Can only mount an unmounted component. Make sure to avoid storing components between renders or reusing a single component instance in multiple places.",e);var o=this._currentElement.ref;if(null!=o){var r=this._currentElement._owner;ReactOwner.addComponentAsRefTo(this,o,r)}this._rootNodeID=e,this._lifeCycleState=ComponentLifeCycle.MOUNTED,this._mountDepth=t},unmountComponent:function(){invariant(this.isMounted(),"unmountComponent(): Can only unmount a mounted component.");var e=this._currentElement.ref;null!=e&&ReactOwner.removeComponentAsRefFrom(this,e,this._owner),unmountIDFromEnvironment(this._rootNodeID),this._rootNodeID=null,this._lifeCycleState=ComponentLifeCycle.UNMOUNTED},receiveComponent:function(e,n){invariant(this.isMounted(),"receiveComponent(...): Can only update a mounted component."),this._pendingElement=e,this.performUpdateIfNecessary(n)},performUpdateIfNecessary:function(e){if(null!=this._pendingElement){var n=this._currentElement,t=this._pendingElement;this._currentElement=t,this.props=t.props,this._owner=t._owner,this._pendingElement=null,this.updateComponent(e,n)}},updateComponent:function(e,n){var t=this._currentElement;(t._owner!==n._owner||t.ref!==n.ref)&&(null!=n.ref&&ReactOwner.removeComponentAsRefFrom(this,n.ref,n._owner),null!=t.ref&&ReactOwner.addComponentAsRefTo(this,t.ref,t._owner))},mountComponentIntoNode:function(e,n,t){var o=ReactUpdates.ReactReconcileTransaction.getPooled();o.perform(this._mountComponentIntoNode,this,e,n,o,t),ReactUpdates.ReactReconcileTransaction.release(o)},_mountComponentIntoNode:function(e,n,t,o){var r=this.mountComponent(e,t,0);mountImageIntoNode(r,n,o)},isOwnedBy:function(e){return this._owner===e},getSiblingByRef:function(e){var n=this._owner;return n&&n.refs?n.refs[e]:null}}};module.exports=ReactComponent;
//# sourceMappingURL=ReactComponent.js.map