var emptyObject=require("emptyObject"),invariant=require("invariant"),ReactOwner={isValidOwner:function(e){return!(!e||"function"!=typeof e.attachRef||"function"!=typeof e.detachRef)},addComponentAsRefTo:function(e,t,n){invariant(ReactOwner.isValidOwner(n),"addComponentAsRefTo(...): Only a ReactOwner can have refs. This usually means that you're trying to add a ref to a component that doesn't have an owner (that is, was not created inside of another component's `render` method). Try rendering this component inside of a new top-level component which will hold the ref."),n.attachRef(t,e)},removeComponentAsRefFrom:function(e,t,n){invariant(ReactOwner.isValidOwner(n),"removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This usually means that you're trying to remove a ref to a component that doesn't have an owner (that is, was not created inside of another component's `render` method). Try rendering this component inside of a new top-level component which will hold the ref."),n.refs[t]===e&&n.detachRef(t)},Mixin:{construct:function(){this.refs=emptyObject},attachRef:function(e,t){invariant(t.isOwnedBy(this),"attachRef(%s, ...): Only a component's owner can store a ref to it.",e);var n=this.refs===emptyObject?this.refs={}:this.refs;n[e]=t},detachRef:function(e){delete this.refs[e]}}};module.exports=ReactOwner;
//# sourceMappingURL=ReactOwner.js.map