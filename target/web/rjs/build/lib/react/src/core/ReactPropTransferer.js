function createTransferStrategy(r){return function(e,n,t){e[n]=e.hasOwnProperty(n)?r(e[n],t):t}}function transferInto(r,e){for(var n in e)if(e.hasOwnProperty(n)){var t=TransferStrategies[n];t&&TransferStrategies.hasOwnProperty(n)?t(r,n,e[n]):r.hasOwnProperty(n)||(r[n]=e[n])}return r}var assign=require("Object.assign"),emptyFunction=require("emptyFunction"),invariant=require("invariant"),joinClasses=require("joinClasses"),warning=require("warning"),didWarn=!1,transferStrategyMerge=createTransferStrategy(function(r,e){return assign({},e,r)}),TransferStrategies={children:emptyFunction,className:createTransferStrategy(joinClasses),style:transferStrategyMerge},ReactPropTransferer={TransferStrategies:TransferStrategies,mergeProps:function(r,e){return transferInto(assign({},r),e)},Mixin:{transferPropsTo:function(r){return invariant(r._owner===this,"%s: You can't call transferPropsTo() on a component that you don't own, %s. This usually means you are calling transferPropsTo() on a component passed in as props or children.",this.constructor.displayName,"string"==typeof r.type?r.type:r.type.displayName),__DEV__&&(didWarn||(didWarn=!0,warning(!1,"transferPropsTo is deprecated. See http://fb.me/react-transferpropsto for more information."))),transferInto(r.props,this.props),r}}};module.exports=ReactPropTransferer;
//# sourceMappingURL=ReactPropTransferer.js.map